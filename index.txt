<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GestureFlow</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <link rel="icon" href="favicon.ico" type="image/x-icon">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400&display=swap" rel="stylesheet">

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <link rel="stylesheet" href="styles.css">

</head>

<body class="text-white">

    <header class="fixed top-0 left-0 right-0 z-50 py-4 px-8 bg-[rgba(13,17,23,0.8)] backdrop-blur-sm shadow-lg">
        <div class="container mx-auto flex justify-between items-center">
            <a href="#" class="font-orbitron text-2xl font-bold text-sky-400 nav-link-glow">
                GestureFlow
            </a>
            <nav>
                <ul class="flex space-x-8">
                    <li><a href="#" class="font-orbitron text-lg text-gray-300 hover:text-white nav-link-glow transition-colors duration-300">HOME</a></li>
                    <li><a href="#" class="font-orbitron text-lg text-gray-300 hover:text-white nav-link-glow transition-colors duration-300">ABOUT US</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <!-- Server Status Indicator -->
    <div id="server-status" class="fixed top-20 right-4 z-40 px-4 py-2 rounded-full text-sm font-orbitron bg-red-500/20 border border-red-500/50">
        <div class="flex items-center gap-2">
            <div id="status-indicator" class="w-2 h-2 rounded-full bg-red-400"></div>
            <span id="status-text" class="text-red-400">AI Server Offline</span>
        </div>
    </div>

    <div class="min-h-screen flex flex-col items-center justify-center p-4 text-center pt-24">
        <section class="mb-16 md:mb-24 max-w-5xl mx-auto">
            <h1 class="font-orbitron text-7xl md:text-9xl font-bold text-white mb-6 glitch-text" data-text="GestureFlow">
                GestureFlow
            </h1>
            <p class="text-xl md:text-3xl text-sky-300 tracking-wide mb-10">
                Speak Without Words, AI Sign Language Recognition in Action.
            </p>
            <div class="flex flex-col sm:flex-row justify-center items-center gap-6">
                <button id="start-experience-btn" class="font-orbitron text-xl md:text-2xl bg-green-500 hover:bg-green-600 text-white font-bold py-5 px-12 rounded-full glow-button inline-block uppercase relative">
                    <span id="btn-text">Start the Experience</span>
                    <div id="loading-spinner" class="hidden absolute inset-0 flex items-center justify-center">
                        <div class="animate-spin rounded-full h-6 w-6 border-2 border-white border-t-transparent"></div>
                    </div>
                </button>
                <a href="gameSelector.html" class="font-orbitron text-xl md:text-2xl bg-green-500 hover:bg-green-600 text-white font-bold py-5 px-12 rounded-full glow-button inline-block uppercase">
                    View Games
                </a>
            </div>

            <!-- Instructions Modal/Section -->
            <div id="instructions-panel" class="hidden mt-12 p-8 bg-gray-900/50 border border-sky-500/30 rounded-xl backdrop-blur-sm">
                <h3 class="font-orbitron text-2xl text-sky-400 mb-4">Getting Started</h3>
                <div class="text-left space-y-3 text-gray-300">
                    <div class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-green-400 rounded-full flex-shrink-0"></div>
                        <span>AI Server is starting up... Please wait</span>
                    </div>
                    <div id="step-server" class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-gray-400 rounded-full flex-shrink-0"></div>
                        <span>Connecting to AI recognition system</span>
                    </div>
                    <div id="step-camera" class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-gray-400 rounded-full flex-shrink-0"></div>
                        <span>Camera access will be requested</span>
                    </div>
                    <div id="step-ready" class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-gray-400 rounded-full flex-shrink-0"></div>
                        <span>Begin gesture recognition</span>
                    </div>
                </div>
                <button id="proceed-btn" class="hidden mt-6 font-orbitron text-lg bg-sky-500 hover:bg-sky-600 text-white font-bold py-3 px-8 rounded-full transition-colors duration-300">
                    Proceed to Recognition
                </button>
            </div>
        </section>

        <section class="max-w-6xl mx-auto py-16">
            <h2 class="font-orbitron text-4xl font-semibold mb-12 border-b-2 border-sky-500/50 pb-4 tracking-wider">How It Works</h2>
            <div class="grid md:grid-cols-3 gap-10">
                <div class="card p-8 rounded-xl flex flex-col items-center">
                    <div class="text-6xl mb-6 text-sky-400">üñ•Ô∏è</div>
                    <h3 class="font-orbitron text-2xl font-bold mb-3 text-white">Enable Webcam</h3>
                    <p class="text-gray-300 leading-relaxed">
                        Grant access to your camera. Our advanced AI processes your gestures in real-time, right in your browser.
                    </p>
                </div>
                <div class="card p-8 rounded-xl flex flex-col items-center">
                    <div class="text-6xl mb-6 text-green-400">‚úã</div>
                    <h3 class="font-orbitron text-2xl font-bold mb-3 text-white">Perform Gestures</h3>
                    <p class="text-gray-300 leading-relaxed">
                        Interact effortlessly with simple hand signs: 'fist' for attack, 'open palm' for shield, 'thumbs up' for power-ups.
                    </p>
                </div>
                <div class="card p-8 rounded-xl flex flex-col items-center">
                    <div class="text-6xl mb-6 text-red-400">üèÜ</div>
                    <h3 class="font-orbitron text-2xl font-bold mb-3 text-white">Conquer the Game</h3>
                    <p class="text-gray-300 leading-relaxed">
                        Become the master of your destiny. Control, fight, and win using the most intuitive controller ever ‚Äî your own hands.
                    </p>
                </div>
            </div>
        </section>

        <footer class="mt-20 py-8 text-gray-500 w-full border-t border-gray-700/50">
            <p class="text-lg">Powered by a cutting-edge Keras/TensorFlow Model & Flask.</p>
            <p class="text-sm mt-2">&copy; 2023 GestureFlow. All rights reserved.</p>
        </footer>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const startBtn = document.getElementById('start-experience-btn');
            const btnText = document.getElementById('btn-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            const serverStatus = document.getElementById('server-status');
            const statusIndicator = document.getElementById('status-indicator');
            const statusText = document.getElementById('status-text');
            const instructionsPanel = document.getElementById('instructions-panel');
            const proceedBtn = document.getElementById('proceed-btn');
            
            let socket = null;
            let serverOnline = false;

            // Check server status on page load
            checkServerStatus();
            
            // Periodically check server status
            setInterval(checkServerStatus, 5000);

            async function checkServerStatus() {
                try {
                    const response = await fetch('http://localhost:5000/health', {
                        method: 'GET',
                        timeout: 3000
                    });
                    
                    if (response.ok) {
                        updateServerStatus(true);
                    } else {
                        updateServerStatus(false);
                    }
                } catch (error) {
                    updateServerStatus(false);
                }
            }

            function updateServerStatus(online) {
                serverOnline = online;
                
                if (online) {
                    serverStatus.className = 'fixed top-20 right-4 z-40 px-4 py-2 rounded-full text-sm font-orbitron bg-green-500/20 border border-green-500/50';
                    statusIndicator.className = 'w-2 h-2 rounded-full bg-green-400';
                    statusText.textContent = 'AI Server Online';
                    statusText.className = 'text-green-400';
                } else {
                    serverStatus.className = 'fixed top-20 right-4 z-40 px-4 py-2 rounded-full text-sm font-orbitron bg-red-500/20 border border-red-500/50';
                    statusIndicator.className = 'w-2 h-2 rounded-full bg-red-400';
                    statusText.textContent = 'AI Server Offline';
                    statusText.className = 'text-red-400';
                }
            }

            async function startServer() {
                try {
                    const response = await fetch('http://localhost:5000/start-server', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (response.ok) {
                        return true;
                    }
                } catch (error) {
                    console.error('Failed to start server:', error);
                }
                return false;
            }

            function updateInstructionStep(stepId, completed) {
                const step = document.getElementById(stepId);
                const indicator = step.querySelector('div');
                
                if (completed) {
                    indicator.className = 'w-2 h-2 bg-green-400 rounded-full flex-shrink-0';
                } else {
                    indicator.className = 'w-2 h-2 bg-yellow-400 rounded-full flex-shrink-0 animate-pulse';
                }
            }

            startBtn.addEventListener('click', async () => {
                if (serverOnline) {
                    // Server is already online, go directly to start page
                    window.location.href = '/start.html';
                    return;
                }

                // Show loading state
                btnText.style.display = 'none';
                loadingSpinner.style.display = 'flex';
                startBtn.disabled = true;
                instructionsPanel.style.display = 'block';

                // Step 1: Try to start/connect to server
                updateInstructionStep('step-server', false);
                
                // First, try to connect to existing server
                let connected = false;
                for (let i = 0; i < 3; i++) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    await checkServerStatus();
                    if (serverOnline) {
                        connected = true;
                        break;
                    }
                }

                if (!connected) {
                    // Try to trigger server start (if you have an endpoint for this)
                    try {
                        await fetch('http://localhost:5000/wake-up', { 
                            method: 'GET',
                            timeout: 2000 
                        });
                        
                        // Wait a bit more for server to start
                        for (let i = 0; i < 10; i++) {
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            await checkServerStatus();
                            if (serverOnline) {
                                connected = true;
                                break;
                            }
                        }
                    } catch (error) {
                        console.log('Server auto-start not available');
                    }
                }

                if (connected) {
                    updateInstructionStep('step-server', true);
                    updateInstructionStep('step-camera', true);
                    updateInstructionStep('step-ready', true);
                    
                    // Show proceed button
                    proceedBtn.style.display = 'inline-block';
                    
                    // Reset button state
                    btnText.style.display = 'block';
                    loadingSpinner.style.display = 'none';
                    btnText.textContent = 'Server Ready!';
                    startBtn.disabled = false;
                    startBtn.className = startBtn.className.replace('bg-green-500 hover:bg-green-600', 'bg-sky-500 hover:bg-sky-600');
                } else {
                    // Server failed to start
                    btnText.style.display = 'block';
                    loadingSpinner.style.display = 'none';
                    btnText.textContent = 'Please Start Server Manually';
                    startBtn.disabled = false;
                    
                    // Show manual instructions
                    const manualInstructions = document.createElement('div');
                    manualInstructions.className = 'mt-4 p-4 bg-yellow-500/20 border border-yellow-500/50 rounded-lg';
                    manualInstructions.innerHTML = `
                        <p class="font-orbitron text-yellow-400 mb-2">Manual Setup Required:</p>
                        <p class="text-sm text-gray-300">Please run <code class="bg-gray-700 px-2 py-1 rounded">python app2.py</code> in your terminal first, then click the button again.</p>
                    `;
                    instructionsPanel.appendChild(manualInstructions);
                }
            });

            proceedBtn.addEventListener('click', () => {
                window.location.href = '/start.html';
            });
        });
    </script>

</body>

</html>


index.html